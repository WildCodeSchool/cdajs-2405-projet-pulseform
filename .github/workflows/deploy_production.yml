name: deploy to production

on:
  push:
    branches: [ main ]

jobs:
  deploy_production:
    runs-on: ubuntu-latest

    steps:
      # Ã‰tape 1 : Cloner le code
      - name: Checkout code
        uses: actions/checkout@v3

      # Ã‰tape 2 : Configurer SSH pour le serveur
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
      
      # Ã‰tape 3 : Obtenir la date
      - name: Get current date and set app name
        run: |
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "myapp=pulseform" >> $GITHUB_ENV
          echo "environnement=main" >> $GITHUB_ENV

      # Ã‰tape 4 : Configurer QEMU pour la construction multiplateforme
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Ã‰tape 5 : Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Ã‰tape 6 : Se connecter Ã  Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Ã‰tape 7 : Construire et pousser l'image Docker du Backend
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          context: ./backend
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-backend:${{ env.environnement }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-backend:${{ github.sha }}
          labels: |
            maintainer=${{ secrets.DOCKERHUB_USERNAME }}
            version=${{ github.sha }}
            build-date=${{ env.date }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-backend:cache
          cache-to: type=inline

      # Ã‰tape 8 : Construire et pousser l'image Docker du Frontend
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          context: ./frontend
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-frontend:${{ env.environnement }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-frontend:${{ github.sha }}
          labels: |
            maintainer=${{ secrets.DOCKERHUB_USERNAME }}
            version=${{ github.sha }}
            build-date=${{ env.date }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-frontend:cache
          cache-to: type=inline
      
      # Ã‰tape 9 : Construire et pousser l'image Docker du serveur de traduction
      - name: Build and push Translation Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          context: ./translation-server
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-translation:${{ env.environnement }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-translation:${{ github.sha }}
          labels: |
            maintainer=${{ secrets.DOCKERHUB_USERNAME }}
            version=${{ github.sha }}
            build-date=${{ env.date }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}-translation:cache
          cache-to: type=inline

      #  Ã‰tape 10 : Authentifier dockerhub sur le serveur
      - name: Login to Docker Hub on main Server
        run: |
          ssh -v -o StrictHostKeyChecking=no -T -p 2269 wns_student@${{ secrets.SERVER_IP }} "
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
          "
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # Ã‰tape 11 : Sauvegarder la base de donnÃ©es
      - name: Run DB backup on main Server
        run: |
          ssh -o StrictHostKeyChecking=no -p 2269 wns_student@${{ secrets.SERVER_IP }} "
            echo 'ðŸ“¦ Starting DB backup...' &&
            bash pulseform/production/backup-db.sh
          " 

      # Ã‰tape 12 : DÃ©ployer sur le serveur la version de production
      - name: Deploy to VPS production version
        run: |
          ssh -o StrictHostKeyChecking=no -p 2269 wns_student@${{ secrets.SERVER_IP }} "
            cd pulseform/production &&
            echo 'Pulling and deploying Docker container...' &&
            docker compose -f docker-compose.yml pull &&
            docker compose -f docker-compose.yml up -d &&
            echo 'Deployment complete.'
          "
          
      # Ã‰tape 13 : Nettoyer le serveur
      - name: Clean up Docker on staging Server
        run: |
         ssh -o StrictHostKeyChecking=no -p 2269 wns_student@${{ secrets.SERVER_IP }} "
            echo 'Starting Docker cleanup...' &&
            echo 'Before cleanup:' &&
            df -h &&
            docker system prune -a --force &&
            docker image prune -a --force &&
            docker volume prune --force &&
            docker network prune --force &&
            echo 'After cleanup:' &&
            df -h &&
            echo 'Docker cleanup completed successfully.'
          "
          