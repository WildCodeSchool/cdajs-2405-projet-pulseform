name: deploy to production

on:
  push:
    branches: [ main ]

jobs:
  deploy_production:
    runs-on: ubuntu-latest

    steps:
      # Ã‰tape 1 : Cloner le code
      - name: Checkout code
        uses: actions/checkout@v3

      # Ã‰tape 2 : Configurer SSH pour le serveur
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
      
      # Ã‰tape 3 : Obtenir la date
      - name: Get current date and set app name
        run: |
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      # Ã‰tape 4 : Configurer QEMU pour la construction multiplateforme
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Ã‰tape 5 : Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      
      # Extract repository name in lowercase
      - name: Extract repository name in lowercase
        id: repo_name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Ã‰tape 7 : Construire et pousser l'image Docker du Backend
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ env.REPO_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.REPO_NAME }}:backend-production
          build-args: |
            CACHEBUST=${{ github.sha }}  # Cache-busting

      # Ã‰tape 8 : Construire et pousser l'image Docker du Frontend
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ env.REPO_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.REPO_NAME }}:frontend-production
          build-args: |
            CACHEBUST=${{ github.sha }}  # Cache-busting
      
      # Ã‰tape 9 : Construire et pousser l'image Docker du serveur de traduction
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./translation-server
          push: true
          tags: |
            ghcr.io/${{ env.REPO_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.REPO_NAME }}:translation-production
          build-args: |
            CACHEBUST=${{ github.sha }}  # Cache-busting

       # Authenticate Docker on the server
      - name: Authenticate Docker on the server
        run: |
          ssh -o StrictHostKeyChecking=no -p 2269 wns_student@${{ secrets.SERVER_IP }} "
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          "

      # Ã‰tape 11 : Sauvegarder la base de donnÃ©es
      - name: Run DB backup on main Server
        run: |
          ssh -o StrictHostKeyChecking=no -p 2269 wns_student@${{ secrets.SERVER_IP }} "
            echo 'ðŸ“¦ Starting DB backup...' &&
            bash pulseform/production/backup-db.sh
          " 

      # Deploy to VPS with logs
      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no -p 2269 wns_student@${{ secrets.SERVER_IP }} "
            cd pulseform/production &&
            echo 'Pulling and deploying Docker container...' &&
            docker compose -f docker-compose.yml pull &&
            docker compose -f docker-compose.yml up -d &&
            echo 'Deployment complete.'
          "
          
      # Ã‰tape 12 : Nettoyer le serveur
      - name: Clean up Docker on staging Server
        run: |
         ssh -o StrictHostKeyChecking=no -p 2269 wns_student@${{ secrets.SERVER_IP }} "
            echo 'Starting Docker cleanup...' &&
            echo 'Before cleanup:' &&
            df -h &&
            docker system prune -a --force &&
            docker image prune -a --force &&
            docker volume prune --force &&
            docker network prune --force &&
            echo 'After cleanup:' &&
            df -h &&
            echo 'Docker cleanup completed successfully.'
          "
          